
From pp@netppl.fi Mon Mar 23 09:44:03 1998
Date: Thu, 19 Mar 1998 22:35:47 +0200
From: Pekka Pietik{inen <pp@netppl.fi>
To: rjkm@thp.uni-koeln.de
Cc: kraxel@cs.tu-berlin.de
Subject: NICAM support for msp3400

I just finished this and it works nicely (haven't tested the dual language
support yet, but I think I got it right. Can't test it now as they don't
use it much here (mostly for sports). 

--- msp3400.c-orig	Tue Mar  3 01:48:24 1998
+++ msp3400.c	Thu Mar 19 22:29:57 1998
@@ -19,13 +19,12 @@
  *      should work, no autodetect (i.e. default is mono, but you can
  *      switch to stereo -- untested)
  *
- *  NICAM
- *      does'nt work yet (well, detecting the NICAM-cable chip version
- *      works, but nothing more).
+ *  NICAM (B/G, used in Scandinavia and Spain)
+ *      should work, with autodetect. Support for NICAM was added by
+ *      Pekka Pietikainen <pp@netppl.fi>
  *
  *
  * TODO:
- *   - NICAM support
  *   - better SAT support
  *
  */
@@ -315,6 +314,7 @@
 msp3400c_setstereo(struct msp3400c *msp, int mode)
 {
     /* switch demodulator */
+    int nicam=0;
     switch (msp->mode) {
     case MSP_MODE_FM_TERRA:
 	dprintk("msp3400: B/G setstereo: %d\n",mode);
@@ -349,6 +349,13 @@
 	    break;
 	}
 	break;
+    case MSP_MODE_FM_NICAM1:
+	dprintk("msp3400: NICAM setstereo: %d\n",mode);
+	msp->stereo = mode;
+	msp3400c_setcarrier(msp->bus,MSP_CARRIER(5.85),MSP_CARRIER(5.5));
+        msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0010, 0x3000);
+	nicam=0x0100;
+	break;
     default:
 	/* can't do stereo - abort here */
 	return;
@@ -357,21 +364,21 @@
     /* switch audio */
     switch (mode) {
     case VIDEO_SOUND_STEREO:
-	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0008, 0x0020);
-	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0009, 0x0020);
-	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x000a, 0x0020);
-	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0005, 0x4000);
+	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0008, 0x0020|nicam);
+	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0009, 0x0020|nicam);
+	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x000a, 0x0020|nicam);
+	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0005, 0x4000|nicam);
 	break;
     case VIDEO_SOUND_MONO:
     case VIDEO_SOUND_LANG1:
-	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0008, 0x0000);
-	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0009, 0x0000);
-	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x000a, 0x0000);
+	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0008, 0x0000|nicam);
+	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0009, 0x0000|nicam);
+	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x000a, 0x0000|nicam);
 	break;
     case VIDEO_SOUND_LANG2:
-	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0008, 0x0010);
-	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0009, 0x0010);
-	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x000a, 0x0010);
+	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0008, 0x0010|nicam);
+	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x0009, 0x0010|nicam);
+	msp3400c_write(msp->bus,I2C_MSP3400C_DFP, 0x000a, 0x0010|nicam);
 	break;
     }
 }
@@ -570,8 +577,15 @@
 		break;
 	    case MSP_MODE_FM_NICAM1:
 		val = msp3400c_read(msp->bus, I2C_MSP3400C_DEM, 0x23);
-		printk(KERN_DEBUG "msp3400: C_AD_BITS=0x%x\n",val);
-		break;
+		dprintk(KERN_DEBUG "msp3400: C_AD_BITS=0x%x\n",val);
+		switch ((val & 0x1e) >> 1)  {
+			case 0:
+			case 8: msp3400c_setstereo(msp, VIDEO_SOUND_STEREO); break;
+			default: msp3400c_setstereo(msp, VIDEO_SOUND_MONO); break;
+		}			
+ 		val = msp3400c_read(msp->bus, I2C_MSP3400C_DEM, 0x58);
+		dprintk(KERN_DEBUG "msp3400: ERROR_RATE=%d\n",val);		break;		
+    		break;
 	    }
 	}
 	UNLOCK_I2C_BUS(msp->bus);

-- 
Pekka Pietikainen, Net People Ltd., Oulu, Finland
